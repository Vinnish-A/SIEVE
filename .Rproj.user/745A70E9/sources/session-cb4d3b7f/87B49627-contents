{
  set.seed(42)
  
  library(tidyverse)
  library(data.table)
  library(R6)
  
  metaIntegration = R6Class(
    classname = "metaIntegration", 
    public = list(
      rules   = NULL,
      exprs   = NULL, 
      phen    = NULL, 
      omics   = NULL, 
      target  = NULL, 
      aligned = NULL, 
      initialize = function(intes_, target_ = NULL) {
        
        if (is.null(names(intes_))) stop("Integrations should be presented in a named list.")
        
        self$exprs = setNames(lapply(intes_, \(ele_) ele_$expr), names(intes_))
        self$phen  = intes_[[1]]$phen
        self$omics = names(self$exprs)
        
        self$target  = target_
        self$aligned = F
        
        self$rules = list(
          .getSamples = function (phen_, condition_) {
            conditions_ = c("default", "pairwise", "faraway")
            if (!condition_ %in% conditions_) {
              stop("Condition shoule be limited in default, pairwise or faraway")
            }
            
            if (condition_ == "default") {
              samples_  = phen_[grepl("01$", sample), list(sample)][[1]]
            } else if (condition_ == "pairwise") {
              patients_ = phen_[grepl("01$|11$", sample), .N, by = patient][N>1][[1]]
              samples_  = phen_[patient %in% patients_ & grepl("01$|11$", sample)][[1]]
            } else if (condition_ == "faraway") {
              patients_ = phen_[grepl("01$|06$", sample), .N, by = patient][N>1][[1]]
              samples_  = phen_[patient %in% patients_ & grepl("01$|06$", sample)][[1]]
            }
            
            return(samples_)
          }
        )
        
        private$.checkIt()
        cat("Prepared\n")
        
      }, 
      setTarget = function (target_) {
        
        self$target = target_
        
      }, 
      extract = function(feas_, condition_ = "default", fixPhen_ = T) {
        
        results_ = lapply(feas_, private$.extract, condition_ = condition_)
        names(results_) = feas_
        
        results_ = results_[!sapply(results_, is.null)]
        
        if (length(results_) == 0) {
          stop("Non valid features captured!")
        }
        
        results_ = lapply(results_, \(result__) result__[!private$.allNaRowsOf(result__)])
        
        return(geneFeature$new(results_, self$phen, names(self$exprs), self$target, fixPhen_))
        
      }, 
      align = function(omics_ = self$omics) {
        
        self$omics = omics_
        self$exprs = self$exprs[self$omics]
        
        feaToKeep_ = Reduce(\(ele1__, ele2__) intersect(ele1__, ele2__), lapply(self$exprs, colnames))
        smpToKeep_ = Reduce(\(ele1__, ele2__) intersect(ele1__, ele2__), lapply(self$exprs, `[[`, "sample"))
        
        self$exprs = lapply(self$exprs, \(expr__) expr__[smpToKeep_, ..feaToKeep_])
        self$phen  = self$phen[smpToKeep_]
        
        self$aligned = T
        
      }, 
      apply = function(fun_, omics_ = self$omics, condition_ = "default", target_ = self$target, enableProgressBar_ = F) {
        
        eachOmic_ = list()
        for (omic_ in omics_) {
          
          cat("Calculating ", omic_, "...\n", sep = "")
          expr_ = private$.data(omic_, condition_, target_)
          
          targetFun_ = function (ind__, data__) {
            fun_(data__[[2]], data__[[ind__]])
          }
          
          result_ = private$.apply(targetFun_, expr_, enableProgressBar_ = enableProgressBar_)
          
          eachValue_ = vector("list", length(result_[[1]]))
          for (i in seq_along(result_[[1]])) {
            eachValue_[[i]] = sapply(result_, `[`, i)
          }
          eachValue_ = as.data.table(eachValue_)
          
          if (!is.null(result_[[1]])) names(eachValue_) = names(result_[[1]])
          eachValue_$feature = colnames(expr_)[-c(1, 2)]
          eachOmic_[[omic_]] = eachValue_
        }
        
        return(eachOmic_)
        
      }, 
      transform = function(fun_, omics_ = self$omics, condition_ = "default", target_ = self$target, enableProgressBar_ = F, return_ = T) {
        
        eachOmic_ = list()
        for (omic_ in omics_) {
          
          cat("Calculating ", omic_, "...\n", sep = "")
          expr_ = private$.data(omic_, condition_, target_)
          
          targetFun_ = function (ind__, data__) {
            fun_(data__[[ind__]])
          }
          
          result_ = private$.apply(targetFun_, expr_, enableProgressBar_ = enableProgressBar_)
          result_ = as.data.table(c(list(expr_[[1]]), result_))
          colnames(result_) = colnames(expr_)[-2]
          eachOmic_[[omic_]] = result_
        }
        
        if (return_) {
          return(eachOmic_)
        } else {
          self[omics_] = eachOmic_[omics_]
        }
        
      }, 
      data = function(omic_, condition_ = "default", target_ = self$target) {
        
        private$.data(omic_, condition_, target_)
        
      }
    ), 
    private = list(
      .checkIt = function () {
        
        trans_ = function (df__) {
          colnames(df__)[1] = "sample"
          df__ = as.data.table(df__)
          setkey(df__, "sample")
          
          df__
        }
        
        
        self$exprs = lapply(self$exprs, trans_)
        names(self$exprs) = self$omics
        
        samplesInExprs_ = unique(unlist(lapply(self$exprs, `[[`, "sample")))
        
        self$phen = trans_(self$phen)
        self$phen = self$phen[samplesInExprs_]
        setkey(self$phen, "sample")
        
      },
      .getTargetSamples = function (target_ = self$target) {
        
        if (!is.null(target_)) {
          toHave_ = c("sample", target_)
          phen_ = self$phen[, ..toHave_]
          phen_ = phen_[!is.na(phen_[[target_]])]
        } else {
          phen_ = self$phen
        }
        
        return(phen_$sample)
        
      }, 
      .getSamples = function (condition_, target_ = self$target) {
        
        intersect(self$rules$.getSamples(self$phen, condition_), private$.getTargetSamples(target_))
        
      }, 
      .extract = function(fea_, condition_ = "default", target_ = self$target) {
        
        samples_ = private$.getSamples(condition_, target_)
        
        result_ = vector("list", length(self$exprs))
        namesForResult_ = names(self$exprs)
        for (i in seq_along(self$exprs)) {
          
          if (fea_ %in% colnames(self$exprs[[i]])) {
            result_[[i]] = self$exprs[[i]][samples_, ..fea_]
          } else {
            result_[[i]] = NA
            cat(fea_, "doesn't exist in", namesForResult_[[i]], "return NA instead\n")
          }
          
        }
        names(result_) = paste("value", namesForResult_, sep = "_")
        result_ = as.data.table(result_)
        
        if (all(is.na(result_))) {
          warning(fea_, " doesn't exist in any omic data, return NULL")
          return(NULL)
        }
        
        result_$sample = samples_
        result_$gene   = fea_
        
        setkey(result_, "sample")
        
        return(result_)
        
      }, 
      .allNaRowsOf = function(result_) {
        
        toDrop_ = c("sample", "gene")
        naRows_ = Reduce(`&`, lapply(result_[, !..toDrop_], is.na))
        
        return(naRows_)
        
      }, 
      .data = function(omic_, condition_ = "default", target_ = self$target) {
        
        expr_    = self$exprs[[omic_]]
        samples_ = intersect(private$.getSamples(condition_, target_), expr_$sample)
        
        toHave_ = c("sample", target_)
        phen_ = self$phen[samples_, ..toHave_]
        expr_ = merge(phen_, expr_, all.x = T)
        
        return(expr_)
        
      }, 
      .apply = function(warpedFun_, data_, enableProgressBar_ = F) {
        
        inds_ = 3:ncol(data_)
        
        if (enableProgressBar_) {
          suppressWarnings(library(progressr))
          handlers(global = TRUE)
          
          p = progressor(along = inds_)
          finalFun_ = function(ind__, data__) {
            p(sprintf("x=%g", ind__))
            warpedFun_(ind__, data__)
          }
        } else {
          finalFun_ = function(ind__, data__) {
            warpedFun_(ind__, data__)
          }
        }
        
        result_ = suppressMessages(future.apply::future_lapply(inds_, finalFun_, data__ = data_))
        
        return(result_)
        
      }
    )
  )
  
  geneFeature = R6Class(
    classname = "geneFeature", 
    public = list(
      values = NULL, 
      phen   = NULL, 
      omics  = NULL, 
      target = NULL,
      initialize = function(values_, phen_, omics_, target = NULL, fixPhen_ = T) {
        
        self$values = values_
        self$phen   = phen_
        self$omics  = omics_
        
        if (fixPhen_) {
          notBadSamples_ = unique(unlist(lapply(self$values, \(value__) value__$sample)))
          self$phen = self$phen[notBadSamples_]
        }
        
      }, 
      setTargets = function (target_) {
        
        self$target = target_
        
      }, 
      getValue = function(target_ = self$target, omics_ = self$omics, wayOfRmNa_ = "any") {
        
        results_ = lapply(self$values, private$.rmNA, way_ = wayOfRmNa_, paste0("value_", omics_))
        
        if (!is.null(target_)) {
          targets_ = lapply(results_, \(each__) self$phen[each__$sample, ..target_])
          results_ = lapply(1:length(targets_), \(i__) cbind(results_[[i__]], targets_[[i__]]))
        }
        
        names(results_) = names(self$values)
        return(results_)
      }
    ), 
    private = list(
      .rmNA = function(dt_, cols_, way_ = "any") {
        
        samplesToDrop_ = switch(
          way_, 
          all = Reduce(`&`, lapply(dt_[, ..cols_], is.na)), 
          any = Reduce(`|`, lapply(dt_[, ..cols_], is.na))
        )
        
        return(dt_[!samplesToDrop_])
        
      }
    )
  )
  
  loadAll = function (phen_, condition_) {
    
    samples_ = phen_[, list(sample)][[1]]
    
    return(samples_)
    
  }
  
  classification_of = function(T_, N_, M_) {
    
    to_judge_ = function(T__, N__, M__) {
      if (str_detect(M__, "1")) return("macro")
      if (str_detect(N__, "2")) return("macro")
      if (str_detect(T__, "4")) return("macro")
      if (str_detect(N__, "1")) return("micro")
      if (all(c(T__, N__, M__) == "X")) return(NA)
      return("localized")
    }
    
    pmap_chr(list(T_, N_, M_), to_judge_)
    
  }
  
  transposition_of = function(dt_) {
    
    dt_ = dt_ |> dplyr::distinct(sample, .keep_all = T)
    
    genes = dt_$sample
    samples = colnames(dt_)[-1]
    
    to_drop = "sample"
    dt_ = transpose(dt_[, !..to_drop])
    dt_ = dt_[, lapply(.SD, \(vec) ifelse(is.na(vec), mean(vec, na.rm = T), vec))]
    
    colnames(dt_) = genes
    dt_[, sample := samples]
    
    neworder_ = colnames(dt_)[c(ncol(dt_), 2:ncol(dt_)-1)]
    dt_[, ..neworder_]
    
  }
  
  integration_of = function(expr_, phen_, to_trans_ = T) {
    
    phen_ = as.data.table(phen_)
    
    if (to_trans_) {
      expr_ = transposition_of(expr_)
    } else {
      expr_ = as.data.table(expr_)
    }
    
    con_ = expr_[, c(1, 2)]; colnames(con_)[2] = "test"
    phen_ = merge(con_, phen_, by = "sample", all = T)
    
    setkey(expr_, "sample"); setkey(phen_, "sample")
    
    list(expr = expr_, phen = phen_)
    
  }
  
  metaIntegration_of = function(intes_ = list(), align_ = T) {
    
    if (align_) {
      forAll_ = lapply(intes, \(ele__) colnames(ele__$expr))
      toKeep_ = Reduce(\(ele1__, ele2__) intersect(ele1__, ele2__), forAll_)
      
      exprs_ = lapply(intes_, \(ele_) ele_$expr[, ..toKeep_])
      names(exprs_) = names(intes_)
    } else {
      exprs_ = lapply(intes_, \(ele_) ele_$expr)
      names(exprs_) = names(intes_)
    }
    
    phen_ = intes_[[1]]$phen
    
    list(
      exprs = exprs_, 
      phen  = phen_
    )
    
  }
  
  extraction_of = function(integration_, fea_, condition_, need_phen_ = F, somebody_ = NULL) {
    
    expr_ = integration_$expr
    phen_ = integration_$phen
    
    conditions_ = c("primary", "pairwise", "faraway")
    if (!condition_ %in% conditions_) {
      stop("Condition shoule be limited in primary, pairwise or faraway")
    }
    
    if (condition_ == "primary") {
      samples_ = phen_[!is.na(test) & grepl("01$", sample) & !is.na(metastasis), list(sample)][[1]]
    } else if (condition_ == "pairwise") {
      patients_ = phen_[grepl("01$|11$", sample) & !is.na(metastasis), .N, by = patient][N>1][[1]]
      samples_  = phen_[patient %in% patients_ & grepl("01$|11$", sample)][[1]]
    } else if (condition_ == "faraway") {
      patients_ = phen_[grepl("01$|06$", sample) & !is.na(metastasis), .N, by = patient][N>1][[1]]
      samples_  = phen_[patient %in% patients_ & grepl("01$|06$", sample)][[1]]
    }
    
    if (length(fea_) == 1 & fea_ == "all") {
      result_ = expr_[sample %in% samples_]
    } else if (length(fea_) == 1 & fea_ == "random") {
      fea_  = c("sample", sample(colnames(expr_)[-1], 1))
      result_ = expr_[sample %in% samples_, ..fea_]
      colnames(result_)[2] = "random"
    } else {
      fea_  = c("sample", fea_)
      result_ = expr_[sample %in% samples_, ..fea_]
    }
    
    if (!is.null(somebody_)) {
      setkey(result_, "sample")
      samples_ = intersect(somebody_, result_$sample)
      result_ = result_[samples_]
    }
    
    if (need_phen_) {
      result_ = merge(phen_, result_, by = "sample")
      setkey(result_, "sample")
      result_
    } else {
      setkey(result_, "sample")
      result_
    }
    
  }
  
  split_of = function(seq_, ratio_ = 0.75) {
    
    train_ = unlist(lapply(unique(seq_), \(x) sample(which(seq_ == x), round(ratio_*length(which(seq_ == x))))))
    test_  = setdiff(1:length(seq_), train_)
    
    list(train = train_, test = test_)
    
  }
}

deletion_of = function(vec_, ele_) {
  
  vec_[!(vec_ %in% ele_)]
  
}

enrichment_of = function(genes_, toGo_, needTrans_ = T, cutoff_ = 0.05) {
  
  library(clusterProfiler)
  
  if (needTrans_) {
    gid_ = bitr(unique(genes_), 'SYMBOL', 'ENTREZID', OrgDb = 'org.Hs.eg.db') |> drop_na()
    genes_ = gid_$ENTREZID
  }
  
  if (toGo_ == "KEGG") {
    enrichKEGG(genes_, pAdjustMethod = "fdr", qvalueCutoff = cutoff_)
  } else if (toGo_ == "GO") {
    enrichGO(genes_, "org.Hs.eg.db", pAdjustMethod = "fdr", qvalueCutoff = cutoff_, ont = "ALL")
  }
  
}

mrnaVsSnp = function(metaInte_, fea_) {
  
  data_ = metaInte_$extract(fea_)$getValue() |> 
    rbindlist() |> 
    mutate(value_snp = factor(ifelse(value_snp == 0, "wt", "mt"), levels = c("wt", "mt")))
  
  library(rstatix)
  library(ggsignif)
  
  statWilcox_ = data_ %>% 
    group_by(gene) %>% 
    wilcox_test(value_mRNA ~ value_snp) %>% 
    add_xy_position(x = "gene")
  
  jitterCalculator_ = function(data__, class__, inClass__, col1__ = "dist_cat_n", col2__ = "scat_adj", dodge__ = dodge_) {
    
    data__[[col1__]] = as.numeric(factor(data__[[class__]]))
    data__[[col2__]] = dodge__*(as.numeric(data__[[inClass__]]) - sum(range(as.numeric(data__[[inClass__]])))/2)/length(levels(data__[[inClass__]]))
    
    data__
    
  }
  
  dodge_ = 1
  data_ |> 
    mutate(gene = str_to_title(gene)) |> 
    jitterCalculator_("gene", "value_snp") |> 
    ggplot(aes(x = gene, y = value_mRNA)) +
    geom_boxplot(aes(color = value_snp), outlier.size = 0, position = position_dodge(width = dodge_), width = 0.5, outlier.stroke = 0) + 
    geom_jitter(aes(x = scat_adj + dist_cat_n, color = value_snp), alpha = 0.2, width = 0.1, stroke = 0) +
    scale_color_manual(values = c("firebrick", "navy"), name = "Type") +
    ylim(NA, ceiling(max(statWilcox_$y.position)*1.1)) +
    xlab("") +
    ylab("Expression") +
    theme_bw() + 
    theme(legend.position = "top") +
    geom_signif(annotations = statWilcox_$p,
                xmin = statWilcox_$xmin,
                xmax = statWilcox_$xmax,
                y_position = max(statWilcox_$y.position)*1.1, 
                color="black")
  
}
